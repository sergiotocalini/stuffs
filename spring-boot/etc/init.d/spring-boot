#!/usr/bin/env ksh

### BEGIN INIT INFO
# Provides:              spring-boot
# Required-Start:        $all
# Required-Stop:         $all
# Default-Start:         2 3 4 5
# Default-Stop:          0 1 6
# Short-Description:     starts the spring-boot applications
# Description:           starts spring-boot using start-stop-daemon
### END INIT INFO

NAME=$(basename $0)
DESC="Springboot Java Application"
SPRING_DIR="/etc/spring-boot"
SPRING_LOG="/var/log/spring-boot"
SPRING_RUN="/var/run/spring-boot"

# Source networking configuration.
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

# Import gunicorn configuration file.
[ -f ${SPRING_DIR}/${APP_NAME%.*}.conf ] && . ${SPRING_DIR}/${NAME%.*}.conf

springboot_list() {
    params=( ${@} )
    if [[ ${#params[@]} == 0 ]]; then
	output[${#output[@]}]="ID;NAME;VERSION;DESCRIPTION"
	output[${#output[@]}]="--;----;-------;-----------"
	for x in ${SPRING_DIR}/conf.d/*.json; do
	    output[${#output[@]}]="`jq -r '[.id, .name, .version, .desc] | join(\";\")' ${x} 2>/dev/null`"
	done
	output[${#output[@]}]="--;----;-------;-----------"
	output[${#output[@]}]=""
	printf "%s\n" "${output[@]}" | column -txne -s ';'	
    elif [[ ${params[0]} == 'units' ]]; then
        if [[ -n ${params[1]} ]]; then
          for x in ${SPRING_DIR}/conf.d/*.json; do
             name=`jq -r 'select(.name=="'${params[1]}'")|.name' ${x} 2>/dev/null`
             if [[ ${name} == ${params[1]} ]]; then
                echo ${x}
                break
             fi
          done
        else
            for x in ${SPRING_DIR}/conf.d/*.json; do
               echo ${x}
            done
        fi
    elif [[ ${params[0]} == 'json' ]]; then
        if [[ ${#params[@]} > 1 ]]; then
            properties="{ "
            for index in ${!params[@]}; do
		[[ ${index} -eq 0 ]] && continue
		[[ ${params[${index}]} =~ .*\..* ]] && continue
		properties+="${params[${index}]},"
            done
            properties="${properties%?} }"
        fi
        springboot="[ "
        for x in ${SPRING_DIR}/conf.d/*.json; do
            springboot+=`jq -rc "${properties:-.}" ${x} 2>/dev/null`
            springboot+=","
        done
        springboot="${springboot%?} ]"
        echo "{}" | jq ".=${springboot}" 2>/dev/null
    fi
}

springboot_config() {
    params=( ${@} )
    # param1: <project>
    # param2: (set|get)
    # param3: <attribute>
    # paramx: values (optional for set option)
    [[ -n ${params[0]} || -n ${params[1]} || -n ${params[2]} ]] || return 1

    config="${SPRING_DIR}/conf.d/${params[0]}.json"
    [ -f "${config}" ] || return 1

    if [[ ${params[1]} =~ (get|GET) ]]; then
	jq -rc ".${params[2]}" "${config}" 2>/dev/null
	if [[ ${?} != 0 ]]; then
	    return 1
	fi
    elif [[ ${params[1]} =~ (set|SET) ]]; then
	json=`jq . "${config}" 2>/dev/null`
	if [[ -n ${json} ]]; then
            if [[ ${#params[@]} > 4 ]]; then
		json=`echo "${json}" | jq ".${params[2]}=[]"`
		for val in "${params[@]:3}"; do
                    json=`echo "${json}" | jq ".${params[2]}+=[${val}]"`
		done
            else
		json=`echo "${json}" | jq ".${params[2]}=\"${params[3]}\""`
	    fi
            [[ -n ${json} ]] && echo "${json}" | jq . 2>/dev/null > "${config}"
	else
	    return 1
	fi
    fi
    return 0
}

case "$1" in
    list)
	springboot_list "${@:2}"
	;;
    # status)
    # 	springboot_status "${@:2}"
    # 	;;    
    config)
	springboot_config "${@:2}"
	;;
    *)
        N="/etc/init.d/${NAME}"
        echo "Usage: ${N} {start|stop|restart|reload|status|list|config} [app]" >&2
        exit 1
        ;;
esac
exit 0
