#!/bin/bash

### BEGIN INIT INFO
# Provides:              gunicorn
# Required-Start:        $all
# Required-Stop:         $all
# Default-Start:         2 3 4 5
# Default-Stop:          0 1 6
# Short-Description:     starts the gunicorn server
# Description:           starts gunicorn using start-stop-daemon
### END INIT INFO

NAME=gunicorn
DESC=gunicorn
GUNICORN_DAEMON=/usr/bin/gunicorn
GUNICORN_DIR=/etc/gunicorn
GUNICORN_CONF=${GUNICORN_DIR}/gunicorn.conf
GUNICORN_INCLUDE=/etc/gunicorn/conf.d
GUNICORN_LOG=/var/log/gunicorn
GUNICORN_RUN=/var/run/gunicorn
VIRTUALENV_PATH=/etc/gunicorn/venvs
RUN_AS="python"
APP_NAME="${2}"

# Source function library.
# [ -f /etc/init.d/functions ] && . /etc/init.d/functions
# [ -f /lib/lsb/init-functions ] && . /lib/lsb/init-functions

# Source networking configuration.
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

# Import gunicorn configuration file.
[ -f ${GUNICORN_CONF} ] && . ${GUNICORN_CONF}

# Testing the gunicorn daemon.
# test -x ${GUNICORN_DAEMON} || exit 0

# Check the run directory.
[ ! -d ${GUNICORN_RUN} ] && mkdir -p ${GUNICORN_RUN}

gunicorn_list() {
    params=( ${@} )
    if [[ ${#params[@]} == 0 ]]; then
	output[${#output[@]}]="ID;NAME;VERSION;DESCRIPTION"
	output[${#output[@]}]="--;----;-------;-----------"
	for x in ${GUNICORN_INCLUDE}/*.json; do
	    output[${#output[@]}]="`jq -r '[.id, .name, .version, .desc] | join(\";\")' ${x} 2>/dev/null`"
	done
    fi
    printf "%s\n" "${output[@]}" | column -txne -s ';'
}

gunicorn_config() {
    params=( ${@} )

    [[ -n ${params[0]} || -n ${params[1]} || -n ${params[2]} ]] || return 1

    config="${SPRING_INCLUDE}/${params[0]}.json"
    [ -f "${config}" ] || return 1

    if [[ ${params[0]} =~ (get|GET) ]]; then
	jq -rc ".${params[1]}" "${config}" 2>/dev/null
	if [[ ${?} != 0 ]]; then
	    return 1
	fi
    elif [[ ${params[0]} =~ (set|SET) ]]; then
	json=`jq . "${config}" 2>/dev/null`
	if [[ -n ${json} ]]; then
            if [[ ${#params[@]} > 4 ]]; then
		json=`echo "${json}" | jq ".${params[2]}=[]"`
		for val in "${params[@]:3}"; do
                    json=`echo "${json}" | jq ".${params[2]}+=[${val}]"`
		done
            else
		json=`echo "${json}" | jq ".${params[2]}=\"${params[3]}\""`
	    fi
            [[ -n ${json} ]] && echo "${json}" | jq . 2>/dev/null > "${config}"
	else
	    return 1
	fi
    fi
    return 0
}

gunicorn_virtualenv() {
   for json in ${GUNICORN_INCLUDE}/*.json; do
       attr_name=`jq -r ".name" ${json} 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue

       attr_runtime_virtualenv=`jq -r ".runtime.virtualenv" ${json} 2>/dev/null`
       attr_runtime_home=`jq -r ".runtime.home" ${json} 2>/dev/null`
       
       if [[ "${attr_runtime_virtualenv}" =~ (yes|YES) ]]; then
	   if [ ! -f "${VIRTUALENV_PATH}/${attr_name}/bin/activate" ]; then
	       virtualenv "${VIRTUALENV_PATH}/${attr_name}"
	   fi
	   source "${VIRTUALENV_PATH}/${attr_name}/bin/activate"
	   [ -f "${attr_runtime_home}/requirements.txt" ] && pip install -r "${attr_runtime_home}/requirements.txt"
	   pip list
	   deactive
       else
	   return 1
       fi
   done
   return 0
}
    
gunicorn_start() {
   for json in ${GUNICORN_INCLUDE}/*.json; do
       attr_name=`jq -r ".name" ${json} 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue       
       attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

       echo -ne "Starting: ${attr_name} ( ${attr_desc} )"
       gunicorn_status "${attr_name}" && echo "" && continue
       
       attr_runtime_user=`jq -r ".runtime.user" ${json} 2>/dev/null`
       attr_runtime_group=`jq -r ".runtime.group" ${json} 2>/dev/null`
       attr_runtime_virtualenv=`jq -r ".runtime.virtualenv" ${json} 2>/dev/null`
       attr_runtime_home=`jq -r ".runtime.home" ${json} 2>/dev/null`
       attr_runtime_opts=`jq -r ".runtime.opts|[join(\" \")]|.[]" ${json} 2>/dev/null`

       DAEMON=${GUNICORN_DAEMON}
       if [[ "${attr_runtime_virtualenv}" =~ (yes|YES) ]]; then
	   DAEMON=${VIRTUALENV_PATH}/${attr_name}/bin/gunicorn
	   source ${VIRTUALENV_PATH}/${attr_name}/bin/activate
       fi
       ${DAEMON} ${attr_runtime_opts} \
		 -u ${attr_runtime_user} \
       		 -p ${GUNICORN_RUN}/${attr_name}.pid \
		 --pythonpath "${attr_runtime_home}" \
       		 --log-level warning \
       		 --error-logfile ${GUNICORN_LOG}/${attr_name}.error.log \
       		 --access-logfile ${GUNICORN_LOG}/${attr_name}.access.log -D
       
       if [[ "${attr_runtime_virtualenv}" =~ (yes|YES) ]]; then
	   deactivate
       fi
       echo ""
       break
   done
   return
}
 
gunicorn_stop() {
    for json in ${GUNICORN_INCLUDE}/*.json;do
       attr_name=`jq -r ".name" ${json} 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue
       attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

       echo -ne "Stopping: ${attr_name} ( ${attr_desc} )"
       if gunicorn_status "${attr_name}"; then
           kill -SIGQUIT `cat "${GUNICORN_RUN}/${attr_name}.pid"`
	   rm "${GUNICORN_RUN}/${attr_name}.pid"
       fi
       echo ""
       break
    done
}

gunicorn_reload() {
    for json in ${GUNICORN_INCLUDE}/*.json;do
       attr_name=`jq -r ".name" ${json} 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue
       attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

       echo -ne "Reloading: ${attr_name} ( ${attr_desc} )"
       if gunicorn_status "${attr_name}"; then
           kill -HUP `cat "${GUNICORN_RUN}/${attr_name}.pid"`
       fi
       echo ""
       break
    done
}

gunicorn_status() {
    show="${1:-no}"
    for json in ${GUNICORN_INCLUDE}/*.json;do
       attr_name=`jq -r ".name" "${json}" 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue
       attr_desc=`jq -r ".desc" "${json}" 2>/dev/null`
       attr_url=`jq -r '.monitoring.ws.url' "${json}" 2>/dev/null`

       if [[ -n ${attr_url/null/} ]]; then
	   rval=`curl --insecure -s ${attr_url} -o /dev/null -w "%{http_code}\n" 2>/dev/null`
	   rcode="${?}"
	   if [[ ${rcode} == 0 ]]; then
	       valid_codes=`jq -r '.monitoring.ws.codes|@sh' "${json}" 2>/dev/null`
	       for code in ${valid_codes[@]:-200}; do
		   if [[ ${code} == ${rval} ]]; then
		       res=1
		       break
		   fi
	       done
	   fi
       else
	   attr_port=(`jq -r '.monitoring.port|@sh' ${json} 2>/dev/null`)
	   for port in ${attr_port[@]}; do
	       pid=`sudo lsof -Pi :${port} -sTCP:LISTEN -t 2>/dev/null`
	       rcode="${?}"
	       if [[ ${rcode} == 0 ]]; then
		   res=1
	       else
		   res=0
	       fi
           done
       fi
       break
    done	   
    if [ ${res:-0} == 0 ]; then
       [ -f "${GUNICORN_RUN}/${attr_name}.pid" ] && rm "${GUNICORN_RUN}/${attr_name}.pid"
       if [[ ${show} =~ (yes|YES|y|1) ]]; then
	  echo -e "Status: ${attr_name} ( ${attr_desc} )"
	  echo -e "   Pid: Is not running!"
       fi
       return 1
    else
       if [[ ${show} =~ (yes|YES|y|1) ]]; then
	  echo -e "Status: ${attr_name} ( ${attr_desc} )"
	  echo -e "   Pid: `cat \"${GUNICORN_RUN}/${attr_name}.pid\"`"
       fi
       return 0
    fi
}

case "$1" in
    list)
        gunicorn_list
        ;;
    start)
        gunicorn_start
        ;;
    stop)
        gunicorn_stop
        ;;
    restart)
        gunicorn_stop
        sleep 3
        gunicorn_start
        ;;
    reload)
        gunicorn_reload
        ;;
    status)
	gunicorn_status yes
	;;
    config)
	gunicorn_config "${@:2}"
	;;
    virtualenv)
	gunicorn_virtualenv
	;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {list|start|stop|restart} [application]" >&2
        exit 1
        ;;
esac
exit 0
