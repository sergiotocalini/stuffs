#!/bin/bash

### BEGIN INIT INFO
# Provides:              gunicorn
# Required-Start:        $all
# Required-Stop:         $all
# Default-Start:         2 3 4 5
# Default-Stop:          0 1 6
# Short-Description:     starts the gunicorn server
# Description:           starts gunicorn using start-stop-daemon
### END INIT INFO

NAME=$(basename $0)
DESC="Python Gunicorn Application"
GUNICORN_DAEMON="/usr/bin/gunicorn"
GUNICORN_DIR="/etc/gunicorn"
GUNICORN_LOG="/var/log/gunicorn"
GUNICORN_RUN="/var/run/gunicorn"
GUNICORN_USER="gunicorn"
VIRTUALENV_PATH="/etc/gunicorn/venvs"
APP_NAME="${2}"

# Source networking configuration.
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

# Import gunicorn configuration file.
[ -f ${GUNICORN_DIR}/${NAME%.*}.conf ] && . ${GUNICORN_DIR}/${NAME%.*}.conf

# Check the run directory.
[ ! -d ${GUNICORN_RUN} ] && mkdir -p ${GUNICORN_RUN}
[ ! -d ${GUNICORN_LOG} ] && mkdir -p ${GUNICORN_LOG}

gunicorn_list() {
    params=( ${@} )
    if [[ ${#params[@]} == 0 ]]; then
	output[${#output[@]}]="ID;NAME;VERSION;DESCRIPTION"
	output[${#output[@]}]="--;----;-------;-----------"
	for x in ${GUNICORN_DIR}/conf.d/*.json; do
	    output[${#output[@]}]="`jq -r '[.id, .name, .version, .desc] | join(\";\")' ${x} 2>/dev/null`"
	done
	output[${#output[@]}]="--;----;-------;-----------"
	output[${#output[@]}]=""
	printf "%s\n" "${output[@]}" | column -txne -s ';'
    elif [[ ${params[0]} == 'units' ]]; then
        if [[ -n ${params[1]} ]]; then
            for x in ${GUNICORN_DIR}/conf.d/*.json; do
		name=`jq -r 'select(.name=="'${params[1]}'")|.name' ${x} 2>/dev/null`
		if [[ ${name} == ${params[1]} ]]; then
                    echo ${x}
                    break
		fi
            done
        else
            for x in ${GUNICORN_DIR}/conf.d/*.json; do
		echo ${x}
            done
        fi
    elif [[ ${params[0]} == 'json' ]]; then
        if [[ ${#params[@]} > 1 ]]; then
            properties="{ "
            for index in ${!params[@]}; do
		[[ ${index} -eq 0 ]] && continue
		[[ ${params[${index}]} =~ .*\..* ]] && continue
		properties+="${params[${index}]},"
            done
            properties="${properties%?} }"
        fi
        gunicorn="[ "
        for x in ${GUNICORN_DIR}/conf.d/*.json; do
            gunicorn+=`jq -rc "${properties:-.}" ${x} 2>/dev/null`
            gunicorn+=","
        done
        gunicorn="${gunicorn%?} ]"
        echo "{}" | jq ".=${gunicorn}" 2>/dev/null
    fi
}

gunicorn_config() {
    params=( ${@} )
    # param1: <project>
    # param2: (set|get|inject)
    # param3: <attribute>
    # paramx: values (optional for set option)
    [[ -n ${params[0]} || -n ${params[1]} || -n ${params[2]} ]] || return 1

    if [[ ${params[1]} =~ (get|GET|set|SET) ]]; then
	config="${GUNICORN_DIR}/conf.d/${params[0]}.json"
	[ -f "${config}" ] || return 1
	if [[ ${params[1]} =~ (get|GET) ]]; then
	    jq -rc ".${params[2]}" "${config}" 2>/dev/null
	    if [[ ${?} != 0 ]]; then
		return 1
	    fi
	elif [[ ${params[1]} =~ (set|SET) ]]; then
	    json=`jq . "${config}" 2>/dev/null`
	    if [[ -n ${json} ]]; then
		if [[ ${#params[@]} > 4 ]]; then
		    json=`echo "${json}" | jq ".${params[2]}=[]"`
		    for val in "${params[@]:3}"; do
			json=`echo "${json}" | jq ".${params[2]}+=[${val}]"`
		    done
		else
		    json=`echo "${json}" | jq ".${params[2]}=\"${params[3]}\""`
		fi
		[[ -n ${json} ]] && echo "${json}" | jq . 2>/dev/null > "${config}"
	    else
		return 1
	    fi
	fi
    elif [[ ${params[1]} =~ (inject|INJECT) ]]; then
	jq . ${params[2]} 2>/dev/null > "${GUNICORN_DIR}/conf.d/${params[0]}.json"
	rcode="${?}"
    fi
    return "${rcode:-0}"
}

gunicorn_virtualenv() {
    params=( ${@} )
    for json in ${GUNICORN_DIR}/conf.d/*.json; do
	attr_name=`jq -r ".name" ${json} 2>/dev/null`
	[[ ${APP_NAME} =~ (ALL) || ${APP_NAME} == ${attr_name} ]] || continue

	attr_runtime_virtualenv=`jq -r ".runtime.virtualenv" ${json} 2>/dev/null`
	attr_runtime_home=`jq -r ".runtime.home" ${json} 2>/dev/null`
	
	if [[ -n ${attr_runtime_virtualenv/null} ]]; then
	    if [ ! -f "${VIRTUALENV_PATH}/${attr_name}/bin/activate" ]; then
		if [[ ! "${attr_runtime_virtualenv}" =~ (yes|YES|enable|ENABLE|true|TRUE) ]]; then
		    opts[${#opts[@]}]="-p ${attr_runtime_virtualenv}"
		fi
		virtualenv ${opts[@]} "${VIRTUALENV_PATH}/${attr_name}"
	    fi
	    source "${VIRTUALENV_PATH}/${attr_name}/bin/activate"
	    pip -q install --upgrade pip
	    pip -q install gunicorn
	    [ -f "${attr_runtime_home}/requirements.txt" ] && pip -q install -r "${attr_runtime_home}/requirements.txt"
	    pip list
	    deactivate
	else
	    return 1
	fi
    done
    return 0
}

gunicorn_start() {
    for json in ${GUNICORN_DIR}/conf.d/*.json; do
	attr_name=`jq -r ".name" ${json} 2>/dev/null`
	[[ ${APP_NAME} =~ (ALL) || ${APP_NAME} == ${attr_name} ]] || continue
	attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

	echo -ne "Starting: ${attr_name} ( ${attr_desc} )"
	gunicorn_status "${attr_name}" && echo "" && continue
	
	attr_runtime_user=`jq -r ".runtime.user" ${json} 2>/dev/null`
	attr_runtime_group=`jq -r ".runtime.group" ${json} 2>/dev/null`
	attr_runtime_virtualenv=`jq -r ".runtime.virtualenv" ${json} 2>/dev/null`
	attr_runtime_home=`jq -r ".runtime.home" ${json} 2>/dev/null`
	attr_runtime_opts=`jq -r ".runtime.opts|[join(\" \")]|.[]" ${json} 2>/dev/null`

	attr_monitoring_statsd_host=`jq -r ".monitoring.statsd.host" ${json} 2>/dev/null`
	attr_monitoring_statsd_prefix=`jq -r ".monitoring.statsd.prefix" ${json} 2>/dev/null`

	attr_syslog_enable=`jq -r ".syslog.enable" ${json} 2>/dev/null`
	attr_syslog_prefix=`jq -r ".syslog.prefix" ${json} 2>/dev/null`
	attr_syslog_facility=`jq -r ".syslog.facility" ${json} 2>/dev/null`
	attr_syslog_address=`jq -r ".syslog.address" ${json} 2>/dev/null`
	
	DAEMON=${GUNICORN_DAEMON}
	if [[ -n ${attr_runtime_virtualenv/null} ]]; then
	    DAEMON=${VIRTUALENV_PATH}/${attr_name}/bin/gunicorn
	    source ${VIRTUALENV_PATH}/${attr_name}/bin/activate
	fi

	GUNICORN_SYSLOG=()
	if [[ ${attr_syslog_enable} =~ (yes|YES|true|TRUE) ]]; then
	    GUNICORN_SYSLOG[0]="--log-syslog"
	    GUNICORN_SYSLOG[1]="--log-syslog-prefix ${attr_syslog_prefix/null/gunicorn.${attr_name}}"
	    GUNICORN_SYSLOG[2]="--log-syslog-facility ${attr_syslog_facility/null/user}"
	    GUNICORN_SYSLOG[3]="--log-syslog-to ${attr_syslog_address/null/'unix:///run/systemd/journal/syslog'}"
	fi
	GUNICORN_SYSLOG=`printf '%s ' ${GUNICORN_SYSLOG[@]}`

	GUNICORN_STATSD=()
	if [[ -n ${attr_monitoring_statsd_host/null} && -n ${attr_monitoring_statsd_prefix/null} ]]; then
	    GUNICORN_STATSD[0]="--statsd-host=${attr_monitoring_statsd_host}"
	    GUNICORN_STATSD[1]="--statsd-prefix=${attr_monitoring_statsd_prefix}"
	fi
	GUNICORN_STATSD=`printf '%s ' ${GUNICORN_STATSD[@]}`

	if [[ -n ${attr_runtime_user/null} && id ${attr_runtime_user} 2>&1 1>/dev/null ]]; then
	    GUNICORN_USER="${attr_runtime_user}"
	elif [[ -n ${GUNICORN_USER} && id "${GUNICORN_USER}" 2>&1 1>/dev/null ]]; then
	    GUNICORN_USER="${GUNICORN_USER}"
	else
	    GUNICORN_USER=`whoami 2>/dev/null`
	fi
	
	${DAEMON} ${attr_runtime_opts} \
		  -u ${GUNICORN_USER} \
       		  -p ${GUNICORN_RUN}/${attr_name}.pid \
		  --pythonpath "${attr_runtime_home}" \
       		  --log-level warning \
		  ${GUNICORN_STATSD} \
		  ${GUNICORN_SYSLOG} \
       		  --error-logfile ${GUNICORN_LOG}/${attr_name}.error.log \
       		  --access-logfile ${GUNICORN_LOG}/${attr_name}.access.log -D
	
	if [[ "${attr_runtime_virtualenv}" =~ (yes|YES) ]]; then
	    deactivate
	fi
	echo ""
    done
    return
}

gunicorn_stop() {
    for json in ${GUNICORN_DIR}/conf.d/*.json;do
	attr_name=`jq -r ".name" ${json} 2>/dev/null`
	[[ ${APP_NAME} =~ (ALL) || ${APP_NAME} == ${attr_name} ]] || continue
	attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

	echo -ne "Stopping: ${attr_name} ( ${attr_desc} )"
	if gunicorn_status "${attr_name}"; then
            kill -SIGQUIT `cat "${GUNICORN_RUN}/${attr_name}.pid"`
	    rm "${GUNICORN_RUN}/${attr_name}.pid"
	fi
	echo ""
    done
}

gunicorn_restart() {
    gunicorn_stop
    echo -en "Waiting: "
    until ! gunicorn_status; do
	sleep 3
	echo -en "."
    done
    echo ""
    gunicorn_start
}

gunicorn_reload() {
    for json in ${GUNICORN_DIR}/conf.d/*.json;do
	attr_name=`jq -r ".name" ${json} 2>/dev/null`
	[[ ${APP_NAME} =~ (ALL) || ${APP_NAME} == ${attr_name} ]] || continue
	attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

	echo -ne "Reloading: ${attr_name} ( ${attr_desc} )"
	if gunicorn_status "${attr_name}"; then
            kill -HUP `cat "${GUNICORN_RUN}/${attr_name}.pid"`
	fi
	echo ""
    done
}

gunicorn_status() {
    local_name="${1}"
    local_show="${2:-no}"
    [[ -n "${name}" ]] && return -1
    res=0
    for json in ${GUNICORN_DIR}/conf.d/*.json;do
	attr_name=`jq -r ".name" "${json}" 2>/dev/null`
	[[ ${local_name} != ${attr_name} ]] && continue
	attr_desc=`jq -r ".desc" "${json}" 2>/dev/null`
	attr_url=`jq -r '.monitoring.ws.url' "${json}" 2>/dev/null`

	if [[ -n ${attr_url/null/} ]]; then
	    rval=`curl --max-time 10 --insecure -s ${attr_url} -o /dev/null -w "%{http_code}\n" 2>/dev/null`
	    rcode="${?}"
	    if [[ ${rcode} == 0 ]]; then
		valid_codes=`jq -r '.monitoring.ws.codes|@sh' "${json}" 2>/dev/null`
		for code in ${valid_codes[@]:-200}; do
		    if [[ ${code} == ${rval} ]]; then
			res=1
			break
		    fi
		done
	    fi
	else
	    attr_port=(`jq -r '.monitoring.port|@sh' ${json} 2>/dev/null`)
	    for port in ${attr_port[@]}; do
		pid=`sudo lsof -Pi :${port} -sTCP:LISTEN -t 2>/dev/null`
		rcode="${?}"
		if [[ ${rcode} == 0 ]]; then
		    res=1
		else
		    res=0
		fi
            done
	fi
	break
    done	   
    if [ ${res:-0} == 0 ]; then
	[ -f "${GUNICORN_RUN}/${attr_name}.pid" ] && rm "${GUNICORN_RUN}/${attr_name}.pid"
	if [[ ${local_show} =~ (yes|YES|y|1) ]]; then
	    echo -e "Status: ${attr_name} ( ${attr_desc} )"
	    echo -e "   Pid: Is not running!"
	fi
	return 1
    else
	if [[ ${local_show} =~ (yes|YES|y|1) ]]; then
	    echo -e "Status: ${attr_name} ( ${attr_desc} )"
	    echo -e "   Pid: `cat \"${GUNICORN_RUN}/${attr_name}.pid\" 2>/dev/null`"
	elif [[ ${local_show} =~ (pid|process) ]]; then
	    echo "`cat \"${GUNICORN_RUN}/${attr_name}.pid\" 2>/dev/null`"
	fi
	return 0
    fi
}

case "$1" in
    list)
        gunicorn_list "${@:2}"
        ;;
    start)
        gunicorn_start
        ;;
    stop)
        gunicorn_stop
        ;;
    restart)
	gunicorn_restart
	;;
    reload)
        gunicorn_reload
        ;;
    status)
	gunicorn_status "${@:2}"
	;;
    config)
	gunicorn_config "${@:2}"
	;;
    virtualenv)
	gunicorn_virtualenv "${@:2}"
	;;
    *)
        N=/etc/init.d/${NAME}
        echo "Usage: $N {start|stop|restart|reload|status|list|config|virtualenv} [app]" >&2
        exit 1
        ;;
esac
exit 0
