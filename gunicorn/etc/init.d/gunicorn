#!/bin/bash

### BEGIN INIT INFO
# Provides:              gunicorn
# Required-Start:        $all
# Required-Stop:         $all
# Default-Start:         2 3 4 5
# Default-Stop:          0 1 6
# Short-Description:     starts the gunicorn server
# Description:           starts gunicorn using start-stop-daemon
### END INIT INFO

NAME=gunicorn
DESC=gunicorn
GUNICORN_DAEMON=/usr/bin/gunicorn
GUNICORN_DIR=/etc/gunicorn
GUNICORN_CONF=${GUNICORN_DIR}/gunicorn.conf
GUNICORN_INCLUDE=/etc/gunicorn/conf.d
GUNICORN_LOG=/var/log/gunicorn
GUNICORN_RUN=/var/run/gunicorn
VIRTUALENV_PATH=/etc/gunicorn/venvs
RUN_AS="python"
APP_NAME="${2}"

# Source function library.
# [ -f /etc/init.d/functions ] && . /etc/init.d/functions
# [ -f /lib/lsb/init-functions ] && . /lib/lsb/init-functions

# Source networking configuration.
[ -f /etc/sysconfig/network ] && . /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

# Import gunicorn configuration file.
[ -f ${GUNICORN_CONF} ] && . ${GUNICORN_CONF}

# Testing the gunicorn daemon.
# test -x ${GUNICORN_DAEMON} || exit 0

# Check the run directory.
[ ! -d ${GUNICORN_RUN} ] && mkdir -p ${GUNICORN_RUN}

gunicorn_start() {
   for json in ${GUNICORN_INCLUDE}/*.json; do
       attr_name=`jq -r ".name" ${json} 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue       
       attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

       echo -ne "Starting: ${attr_name} ( ${attr_desc} )"
       [[ -f ${GUNICORN_RUN}/${attr_name}.pid ]] && continue
       
       attr_runtime_user=`jq -r ".runtime.user" ${json} 2>/dev/null`
       attr_runtime_group=`jq -r ".runtime.group" ${json} 2>/dev/null`
       attr_runtime_virtualenv=`jq -r ".runtime.virtualenv" ${json} 2>/dev/null`
       attr_runtime_home=`jq -r ".runtime.home" ${json} 2>/dev/null`
       attr_runtime_opts=`jq -r ".runtime.opts|[join(\" \")]|.[]" ${json} 2>/dev/null`

       DAEMON=${GUNICORN_DAEMON}
       if [[ "${attr_runtime_virtualenv}" =~ (yes|YES) ]]; then
	   DAEMON=${VIRTUALENV_PATH}/${attr_name}/bin/gunicorn
	   source ${VIRTUALENV_PATH}/${attr_name}/bin/activate
       fi
       ${DAEMON} ${attr_runtime_opts} \
		 -u ${attr_runtime_user} \
       		 -p ${GUNICORN_RUN}/${attr_name}.pid \
		 --pythonpath "${attr_runtime_home}" \
       		 --log-level warning \
       		 --error-logfile ${GUNICORN_LOG}/${attr_name}.error.log \
       		 --access-logfile ${GUNICORN_LOG}/${attr_name}.access.log -D
       
       if [[ "${attr_runtime_virtualenv}" =~ (yes|YES) ]]; then
	   deactivate
       fi
       echo ""
   done
   return
}
 
gunicorn_stop() {
    for json in ${GUNICORN_INCLUDE}/*.json;do
       attr_name=`jq -r ".name" ${json} 2>/dev/null`
       [[ ${attr_name} != ${APP_NAME} ]] && continue
       attr_desc=`jq -r ".desc" ${json} 2>/dev/null`

       echo -ne "Stopping: ${attr_name} ( ${attr_desc} )"
       if [ -f ${GUNICORN_RUN}/${attr_name}.pid ]; then
           kill -9 `cat ${GUNICORN_RUN}/${attr_name}.pid`
	   rm ${GUNICORN_RUN}/${attr_name}.pid
       fi
       echo ""
    done
}

case "$1" in
    list)
        echo "Applications supported"
        list
        ;;
    start)
        gunicorn_start
        ;;
    stop)
        gunicorn_stop
        ;;
    # restart)
    #     gunicorn_stop
    #     sleep 1
    #     gunicorn_start
    #     ;;
    *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {list|start|stop|restart} [application]" >&2
        exit 1
        ;;
esac
exit 0
